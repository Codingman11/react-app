{"version":3,"sources":["serviceWorker.js","components/board-box.jsx","utils/isWinner.js","components/board.jsx","components/game.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Box","props","className","onClick","value","calculateWinner","squares","moves","lines","i","length","a","b","c","d","e","Board","state","Array","fill","xIsNext","this","slice","setState","console","log","handleClick","status","winner","renderSquare","React","Component","Game","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.722a0e8c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nfunction Box(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Box;\r\n\r\n","const calculateWinner = (squares, moves) => {\r\n  const lines = [\r\n    [0, 1, 2, 3, 4],\r\n    [5, 6, 7, 8, 9],\r\n    [10, 11, 12, 13, 14],\r\n    [15, 16, 17, 18, 19],\r\n    [20, 21, 22, 23, 24],\r\n    [0, 5, 10, 15, 20],\r\n    [1, 6, 11, 16, 21],\r\n    [2, 7, 12, 17, 22],\r\n    [3, 8, 13, 18, 23],\r\n    [4, 9, 14, 19, 24],\r\n    [0, 6, 12, 18, 24],\r\n    [4, 8, 12, 16, 20]\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c, d, e] = lines[i];\r\n\r\n    if (\r\n      squares[a] &&\r\n      squares[a] === squares[b] &&\r\n      squares[a] === squares[c] &&\r\n      squares[a] === squares[d] &&\r\n      squares[a] === squares[e]\r\n    ) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default calculateWinner;\r\n","import React from 'react';\r\nimport Box from './board-box';\r\nimport calculateWinner from '../utils/isWinner.js';\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(25).fill(null),\r\n            xIsNext: true,\r\n            moves: 0\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const squares = this.state.squares.slice();\r\n        if (calculateWinner(squares) || squares[i] || this.moves === 25) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n        this.setState({\r\n            squares: squares,\r\n            xIsNext: !this.state.xIsNext,\r\n\r\n        });\r\n        console.log(this.moves);\r\n    }\r\n\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Box\r\n                value={this.state.squares[i]}\r\n                onClick={() => this.handleClick(i) && this.moves++}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        const winner = calculateWinner(this.state.squares);\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else if (this.state.moves === 25) {\r\n            status = 'Tie';\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"status\">{status}</div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}{this.renderSquare(1)}{this.renderSquare(2)}{this.renderSquare(3)}{this.renderSquare(4)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(5)}{this.renderSquare(6)}{this.renderSquare(7)}{this.renderSquare(8)}{this.renderSquare(9)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(10)}{this.renderSquare(11)}{this.renderSquare(12)}{this.renderSquare(13)}{this.renderSquare(14)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(15)}{this.renderSquare(16)}{this.renderSquare(17)}{this.renderSquare(18)}{this.renderSquare(19)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(20)}{this.renderSquare(21)}{this.renderSquare(22)}{this.renderSquare(23)}{this.renderSquare(24)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import Board from \"./board\";\r\nimport React from 'react';\r\nclass Game extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{/* status */}</div>\r\n                    <ol>{/* TODO */}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport Game from \"./components/game\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}